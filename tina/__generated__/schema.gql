# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  user(relativePath: String): User!
  authenticate(sub: String!, password: String!): UserUsers
  authorize: UserUsers
  userConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: UserFilter): UserConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
  portfolio(relativePath: String): Portfolio!
  portfolioConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PortfolioFilter): PortfolioConnection!
}

input DocumentFilter {
  user: UserFilter
  pages: PagesFilter
  global: GlobalFilter
  portfolio: PortfolioFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = User | Pages | Global | Portfolio | Folder

type UserUsersPassword {
  value: String!
  passwordChangeRequired: Boolean
}

type UserUsers {
  username: String!
  name: String
  email: String
  password: UserUsersPassword!
}

type User implements Node & Document {
  users: [UserUsers]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input UserUsersFilter {
  username: StringFilter
  name: StringFilter
  email: StringFilter
}

input UserFilter {
  users: UserUsersFilter
}

type UserConnectionEdges {
  cursor: String!
  node: User
}

type UserConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [UserConnectionEdges]
}

type PagesSectionsSingleTitleHeroSection {
  singleTitle: String!
  sectionDescription: String
  heroImage: String
  link: String
}

type PagesSectionsMultipleTitleHeroSectionMultipleTitles {
  title: String!
}

type PagesSectionsMultipleTitleHeroSection {
  multipleTitles: [PagesSectionsMultipleTitleHeroSectionMultipleTitles]
  sectionDescription: String
  heroImage: String
  link: String
}

type PagesSectionsCompanyDisplaySectionChildren {
  href: String!
  heroImage: String
}

type PagesSectionsCompanyDisplaySection {
  sectionTitle: String!
  children: [PagesSectionsCompanyDisplaySectionChildren]
}

type PagesSectionsProductSectionProductSectionChild {
  sectionTitle: String!
  sectionDescription: String
  heroImage: String
  link: String
}

type PagesSectionsProductSection {
  sectionTitle: String!
  sectionContent: String
  productSectionChild: [PagesSectionsProductSectionProductSectionChild]
}

type PagesSectionsServiceSection {
  author: String
  quote: String
}

union PagesSections = PagesSectionsSingleTitleHeroSection | PagesSectionsMultipleTitleHeroSection | PagesSectionsCompanyDisplaySection | PagesSectionsProductSection | PagesSectionsServiceSection

type Pages implements Node & Document {
  title: String!
  description: String
  sections: [PagesSections]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PagesSectionsSingleTitleHeroSectionFilter {
  singleTitle: StringFilter
  sectionDescription: StringFilter
  heroImage: ImageFilter
  link: StringFilter
}

input PagesSectionsMultipleTitleHeroSectionMultipleTitlesFilter {
  title: StringFilter
}

input PagesSectionsMultipleTitleHeroSectionFilter {
  multipleTitles: PagesSectionsMultipleTitleHeroSectionMultipleTitlesFilter
  sectionDescription: StringFilter
  heroImage: ImageFilter
  link: StringFilter
}

input PagesSectionsCompanyDisplaySectionChildrenFilter {
  href: StringFilter
  heroImage: ImageFilter
}

input PagesSectionsCompanyDisplaySectionFilter {
  sectionTitle: StringFilter
  children: PagesSectionsCompanyDisplaySectionChildrenFilter
}

input PagesSectionsProductSectionProductSectionChildFilter {
  sectionTitle: StringFilter
  sectionDescription: StringFilter
  heroImage: ImageFilter
  link: StringFilter
}

input PagesSectionsProductSectionFilter {
  sectionTitle: StringFilter
  sectionContent: StringFilter
  productSectionChild: PagesSectionsProductSectionProductSectionChildFilter
}

input PagesSectionsServiceSectionFilter {
  author: StringFilter
  quote: StringFilter
}

input PagesSectionsFilter {
  singleTitleHeroSection: PagesSectionsSingleTitleHeroSectionFilter
  multipleTitleHeroSection: PagesSectionsMultipleTitleHeroSectionFilter
  companyDisplaySection: PagesSectionsCompanyDisplaySectionFilter
  productSection: PagesSectionsProductSectionFilter
  serviceSection: PagesSectionsServiceSectionFilter
}

input PagesFilter {
  title: StringFilter
  description: StringFilter
  sections: PagesSectionsFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type GlobalHeaderNavChildren {
  href: String
  label: String
}

type GlobalHeaderNav {
  href: String
  label: String
  isActive: Boolean
  children: [GlobalHeaderNavChildren]
}

type GlobalHeader {
  title: String
  logo: String
  nav: [GlobalHeaderNav]
}

type GlobalFooterSocial {
  facebook: String
  linkedIn: String
  twitter: String
}

type GlobalFooter {
  social: GlobalFooterSocial
}

type Global implements Node & Document {
  header: GlobalHeader
  footer: GlobalFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input GlobalHeaderNavChildrenFilter {
  href: StringFilter
  label: StringFilter
}

input GlobalHeaderNavFilter {
  href: StringFilter
  label: StringFilter
  isActive: BooleanFilter
  children: GlobalHeaderNavChildrenFilter
}

input GlobalHeaderFilter {
  title: StringFilter
  logo: ImageFilter
  nav: GlobalHeaderNavFilter
}

input GlobalFooterSocialFilter {
  facebook: StringFilter
  linkedIn: StringFilter
  twitter: StringFilter
}

input GlobalFooterFilter {
  social: GlobalFooterSocialFilter
}

input GlobalFilter {
  header: GlobalHeaderFilter
  footer: GlobalFooterFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Portfolio implements Node & Document {
  title: String!
  category: String!
  category_color: String
  description: String!
  bgColor: String!
  textColor: String!
  buttonColor: String!
  image: String!
  bgImage: String!
  linkImage: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PortfolioFilter {
  title: StringFilter
  category: StringFilter
  category_color: StringFilter
  description: StringFilter
  bgColor: StringFilter
  textColor: StringFilter
  buttonColor: StringFilter
  image: ImageFilter
  bgImage: ImageFilter
  linkImage: ImageFilter
}

type PortfolioConnectionEdges {
  cursor: String!
  node: Portfolio
}

type PortfolioConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PortfolioConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePassword(password: String!): Boolean!
  updateUser(relativePath: String!, params: UserMutation!): User!
  createUser(relativePath: String!, params: UserMutation!): User!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updatePortfolio(relativePath: String!, params: PortfolioMutation!): Portfolio!
  createPortfolio(relativePath: String!, params: PortfolioMutation!): Portfolio!
}

input DocumentUpdateMutation {
  user: UserMutation
  pages: PagesMutation
  global: GlobalMutation
  portfolio: PortfolioMutation
  relativePath: String
}

input DocumentMutation {
  user: UserMutation
  pages: PagesMutation
  global: GlobalMutation
  portfolio: PortfolioMutation
}

input UserUsersPasswordMutation {
  value: String
  passwordChangeRequired: Boolean!
}

input UserUsersMutation {
  username: String
  name: String
  email: String
  password: UserUsersPasswordMutation
}

input UserMutation {
  users: [UserUsersMutation]
}

input PagesSectionsSingleTitleHeroSectionMutation {
  singleTitle: String
  sectionDescription: String
  heroImage: String
  link: String
}

input PagesSectionsMultipleTitleHeroSectionMultipleTitlesMutation {
  title: String
}

input PagesSectionsMultipleTitleHeroSectionMutation {
  multipleTitles: [PagesSectionsMultipleTitleHeroSectionMultipleTitlesMutation]
  sectionDescription: String
  heroImage: String
  link: String
}

input PagesSectionsCompanyDisplaySectionChildrenMutation {
  href: String
  heroImage: String
}

input PagesSectionsCompanyDisplaySectionMutation {
  sectionTitle: String
  children: [PagesSectionsCompanyDisplaySectionChildrenMutation]
}

input PagesSectionsProductSectionProductSectionChildMutation {
  sectionTitle: String
  sectionDescription: String
  heroImage: String
  link: String
}

input PagesSectionsProductSectionMutation {
  sectionTitle: String
  sectionContent: String
  productSectionChild: [PagesSectionsProductSectionProductSectionChildMutation]
}

input PagesSectionsServiceSectionMutation {
  author: String
  quote: String
}

input PagesSectionsMutation {
  singleTitleHeroSection: PagesSectionsSingleTitleHeroSectionMutation
  multipleTitleHeroSection: PagesSectionsMultipleTitleHeroSectionMutation
  companyDisplaySection: PagesSectionsCompanyDisplaySectionMutation
  productSection: PagesSectionsProductSectionMutation
  serviceSection: PagesSectionsServiceSectionMutation
}

input PagesMutation {
  title: String
  description: String
  sections: [PagesSectionsMutation]
}

input GlobalHeaderNavChildrenMutation {
  href: String
  label: String
}

input GlobalHeaderNavMutation {
  href: String
  label: String
  isActive: Boolean
  children: [GlobalHeaderNavChildrenMutation]
}

input GlobalHeaderMutation {
  title: String
  logo: String
  nav: [GlobalHeaderNavMutation]
}

input GlobalFooterSocialMutation {
  facebook: String
  linkedIn: String
  twitter: String
}

input GlobalFooterMutation {
  social: GlobalFooterSocialMutation
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
}

input PortfolioMutation {
  title: String
  category: String
  category_color: String
  description: String
  bgColor: String
  textColor: String
  buttonColor: String
  image: String
  bgImage: String
  linkImage: String
}

schema {
  query: Query
  mutation: Mutation
}
