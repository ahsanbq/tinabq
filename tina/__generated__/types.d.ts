//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  user: User;
  authenticate?: Maybe<UserUsers>;
  authorize?: Maybe<UserUsers>;
  userConnection: UserConnection;
  pages: Pages;
  pagesConnection: PagesConnection;
  global: Global;
  globalConnection: GlobalConnection;
  portfolio: Portfolio;
  portfolioConnection: PortfolioConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryUserArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAuthenticateArgs = {
  sub: Scalars['String']['input'];
  password: Scalars['String']['input'];
};


export type QueryUserConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<UserFilter>;
};


export type QueryPagesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPagesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PagesFilter>;
};


export type QueryGlobalArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGlobalConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<GlobalFilter>;
};


export type QueryPortfolioArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPortfolioConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PortfolioFilter>;
};

export type DocumentFilter = {
  user?: InputMaybe<UserFilter>;
  pages?: InputMaybe<PagesFilter>;
  global?: InputMaybe<GlobalFilter>;
  portfolio?: InputMaybe<PortfolioFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = User | Pages | Global | Portfolio | Folder;

export type UserUsersPassword = {
  __typename?: 'UserUsersPassword';
  value: Scalars['String']['output'];
  passwordChangeRequired?: Maybe<Scalars['Boolean']['output']>;
};

export type UserUsers = {
  __typename?: 'UserUsers';
  username: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  password: UserUsersPassword;
};

export type User = Node & Document & {
  __typename?: 'User';
  users?: Maybe<Array<Maybe<UserUsers>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type UserUsersFilter = {
  username?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
};

export type UserFilter = {
  users?: InputMaybe<UserUsersFilter>;
};

export type UserConnectionEdges = {
  __typename?: 'UserConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<User>;
};

export type UserConnection = Connection & {
  __typename?: 'UserConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<UserConnectionEdges>>>;
};

export type PagesSectionsSingleTitleHeroSection = {
  __typename?: 'PagesSectionsSingleTitleHeroSection';
  singleTitle: Scalars['String']['output'];
  sectionDescription?: Maybe<Scalars['String']['output']>;
  heroImage?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
};

export type PagesSectionsMultipleTitleHeroSectionMultipleTitles = {
  __typename?: 'PagesSectionsMultipleTitleHeroSectionMultipleTitles';
  title: Scalars['String']['output'];
};

export type PagesSectionsMultipleTitleHeroSection = {
  __typename?: 'PagesSectionsMultipleTitleHeroSection';
  multipleTitles?: Maybe<Array<Maybe<PagesSectionsMultipleTitleHeroSectionMultipleTitles>>>;
  sectionDescription?: Maybe<Scalars['String']['output']>;
  heroImage?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
};

export type PagesSectionsCompanyDisplaySectionChildren = {
  __typename?: 'PagesSectionsCompanyDisplaySectionChildren';
  href: Scalars['String']['output'];
  heroImage?: Maybe<Scalars['String']['output']>;
};

export type PagesSectionsCompanyDisplaySection = {
  __typename?: 'PagesSectionsCompanyDisplaySection';
  sectionTitle: Scalars['String']['output'];
  children?: Maybe<Array<Maybe<PagesSectionsCompanyDisplaySectionChildren>>>;
};

export type PagesSectionsProductSectionProductSectionChild = {
  __typename?: 'PagesSectionsProductSectionProductSectionChild';
  sectionTitle: Scalars['String']['output'];
  sectionDescription?: Maybe<Scalars['String']['output']>;
  heroImage?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
};

export type PagesSectionsProductSection = {
  __typename?: 'PagesSectionsProductSection';
  sectionTitle: Scalars['String']['output'];
  sectionContent?: Maybe<Scalars['String']['output']>;
  productSectionChild?: Maybe<Array<Maybe<PagesSectionsProductSectionProductSectionChild>>>;
};

export type PagesSectionsServiceSection = {
  __typename?: 'PagesSectionsServiceSection';
  author?: Maybe<Scalars['String']['output']>;
  quote?: Maybe<Scalars['String']['output']>;
};

export type PagesSections = PagesSectionsSingleTitleHeroSection | PagesSectionsMultipleTitleHeroSection | PagesSectionsCompanyDisplaySection | PagesSectionsProductSection | PagesSectionsServiceSection;

export type Pages = Node & Document & {
  __typename?: 'Pages';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  sections?: Maybe<Array<Maybe<PagesSections>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type PagesSectionsSingleTitleHeroSectionFilter = {
  singleTitle?: InputMaybe<StringFilter>;
  sectionDescription?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<ImageFilter>;
  link?: InputMaybe<StringFilter>;
};

export type PagesSectionsMultipleTitleHeroSectionMultipleTitlesFilter = {
  title?: InputMaybe<StringFilter>;
};

export type PagesSectionsMultipleTitleHeroSectionFilter = {
  multipleTitles?: InputMaybe<PagesSectionsMultipleTitleHeroSectionMultipleTitlesFilter>;
  sectionDescription?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<ImageFilter>;
  link?: InputMaybe<StringFilter>;
};

export type PagesSectionsCompanyDisplaySectionChildrenFilter = {
  href?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<ImageFilter>;
};

export type PagesSectionsCompanyDisplaySectionFilter = {
  sectionTitle?: InputMaybe<StringFilter>;
  children?: InputMaybe<PagesSectionsCompanyDisplaySectionChildrenFilter>;
};

export type PagesSectionsProductSectionProductSectionChildFilter = {
  sectionTitle?: InputMaybe<StringFilter>;
  sectionDescription?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<ImageFilter>;
  link?: InputMaybe<StringFilter>;
};

export type PagesSectionsProductSectionFilter = {
  sectionTitle?: InputMaybe<StringFilter>;
  sectionContent?: InputMaybe<StringFilter>;
  productSectionChild?: InputMaybe<PagesSectionsProductSectionProductSectionChildFilter>;
};

export type PagesSectionsServiceSectionFilter = {
  author?: InputMaybe<StringFilter>;
  quote?: InputMaybe<StringFilter>;
};

export type PagesSectionsFilter = {
  singleTitleHeroSection?: InputMaybe<PagesSectionsSingleTitleHeroSectionFilter>;
  multipleTitleHeroSection?: InputMaybe<PagesSectionsMultipleTitleHeroSectionFilter>;
  companyDisplaySection?: InputMaybe<PagesSectionsCompanyDisplaySectionFilter>;
  productSection?: InputMaybe<PagesSectionsProductSectionFilter>;
  serviceSection?: InputMaybe<PagesSectionsServiceSectionFilter>;
};

export type PagesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  sections?: InputMaybe<PagesSectionsFilter>;
};

export type PagesConnectionEdges = {
  __typename?: 'PagesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Pages>;
};

export type PagesConnection = Connection & {
  __typename?: 'PagesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PagesConnectionEdges>>>;
};

export type GlobalHeaderNavChildren = {
  __typename?: 'GlobalHeaderNavChildren';
  href?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
};

export type GlobalHeaderNav = {
  __typename?: 'GlobalHeaderNav';
  href?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
  isActive?: Maybe<Scalars['Boolean']['output']>;
  children?: Maybe<Array<Maybe<GlobalHeaderNavChildren>>>;
};

export type GlobalHeader = {
  __typename?: 'GlobalHeader';
  title?: Maybe<Scalars['String']['output']>;
  logo?: Maybe<Scalars['String']['output']>;
  nav?: Maybe<Array<Maybe<GlobalHeaderNav>>>;
};

export type GlobalFooterSocial = {
  __typename?: 'GlobalFooterSocial';
  facebook?: Maybe<Scalars['String']['output']>;
  linkedIn?: Maybe<Scalars['String']['output']>;
  twitter?: Maybe<Scalars['String']['output']>;
};

export type GlobalFooter = {
  __typename?: 'GlobalFooter';
  social?: Maybe<GlobalFooterSocial>;
};

export type Global = Node & Document & {
  __typename?: 'Global';
  header?: Maybe<GlobalHeader>;
  footer?: Maybe<GlobalFooter>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GlobalHeaderNavChildrenFilter = {
  href?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
};

export type GlobalHeaderNavFilter = {
  href?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
  isActive?: InputMaybe<BooleanFilter>;
  children?: InputMaybe<GlobalHeaderNavChildrenFilter>;
};

export type GlobalHeaderFilter = {
  title?: InputMaybe<StringFilter>;
  logo?: InputMaybe<ImageFilter>;
  nav?: InputMaybe<GlobalHeaderNavFilter>;
};

export type GlobalFooterSocialFilter = {
  facebook?: InputMaybe<StringFilter>;
  linkedIn?: InputMaybe<StringFilter>;
  twitter?: InputMaybe<StringFilter>;
};

export type GlobalFooterFilter = {
  social?: InputMaybe<GlobalFooterSocialFilter>;
};

export type GlobalFilter = {
  header?: InputMaybe<GlobalHeaderFilter>;
  footer?: InputMaybe<GlobalFooterFilter>;
};

export type GlobalConnectionEdges = {
  __typename?: 'GlobalConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Global>;
};

export type GlobalConnection = Connection & {
  __typename?: 'GlobalConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<GlobalConnectionEdges>>>;
};

export type Portfolio = Node & Document & {
  __typename?: 'Portfolio';
  title: Scalars['String']['output'];
  category: Scalars['String']['output'];
  category_color?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  bgColor: Scalars['String']['output'];
  textColor: Scalars['String']['output'];
  buttonColor: Scalars['String']['output'];
  image: Scalars['String']['output'];
  bgImage: Scalars['String']['output'];
  linkImage: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PortfolioFilter = {
  title?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  category_color?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  bgColor?: InputMaybe<StringFilter>;
  textColor?: InputMaybe<StringFilter>;
  buttonColor?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  bgImage?: InputMaybe<ImageFilter>;
  linkImage?: InputMaybe<ImageFilter>;
};

export type PortfolioConnectionEdges = {
  __typename?: 'PortfolioConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Portfolio>;
};

export type PortfolioConnection = Connection & {
  __typename?: 'PortfolioConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PortfolioConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updatePassword: Scalars['Boolean']['output'];
  updateUser: User;
  createUser: User;
  updatePages: Pages;
  createPages: Pages;
  updateGlobal: Global;
  createGlobal: Global;
  updatePortfolio: Portfolio;
  createPortfolio: Portfolio;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdatePasswordArgs = {
  password: Scalars['String']['input'];
};


export type MutationUpdateUserArgs = {
  relativePath: Scalars['String']['input'];
  params: UserMutation;
};


export type MutationCreateUserArgs = {
  relativePath: Scalars['String']['input'];
  params: UserMutation;
};


export type MutationUpdatePagesArgs = {
  relativePath: Scalars['String']['input'];
  params: PagesMutation;
};


export type MutationCreatePagesArgs = {
  relativePath: Scalars['String']['input'];
  params: PagesMutation;
};


export type MutationUpdateGlobalArgs = {
  relativePath: Scalars['String']['input'];
  params: GlobalMutation;
};


export type MutationCreateGlobalArgs = {
  relativePath: Scalars['String']['input'];
  params: GlobalMutation;
};


export type MutationUpdatePortfolioArgs = {
  relativePath: Scalars['String']['input'];
  params: PortfolioMutation;
};


export type MutationCreatePortfolioArgs = {
  relativePath: Scalars['String']['input'];
  params: PortfolioMutation;
};

export type DocumentUpdateMutation = {
  user?: InputMaybe<UserMutation>;
  pages?: InputMaybe<PagesMutation>;
  global?: InputMaybe<GlobalMutation>;
  portfolio?: InputMaybe<PortfolioMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  user?: InputMaybe<UserMutation>;
  pages?: InputMaybe<PagesMutation>;
  global?: InputMaybe<GlobalMutation>;
  portfolio?: InputMaybe<PortfolioMutation>;
};

export type UserUsersPasswordMutation = {
  value?: InputMaybe<Scalars['String']['input']>;
  passwordChangeRequired: Scalars['Boolean']['input'];
};

export type UserUsersMutation = {
  username?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<UserUsersPasswordMutation>;
};

export type UserMutation = {
  users?: InputMaybe<Array<InputMaybe<UserUsersMutation>>>;
};

export type PagesSectionsSingleTitleHeroSectionMutation = {
  singleTitle?: InputMaybe<Scalars['String']['input']>;
  sectionDescription?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type PagesSectionsMultipleTitleHeroSectionMultipleTitlesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
};

export type PagesSectionsMultipleTitleHeroSectionMutation = {
  multipleTitles?: InputMaybe<Array<InputMaybe<PagesSectionsMultipleTitleHeroSectionMultipleTitlesMutation>>>;
  sectionDescription?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type PagesSectionsCompanyDisplaySectionChildrenMutation = {
  href?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
};

export type PagesSectionsCompanyDisplaySectionMutation = {
  sectionTitle?: InputMaybe<Scalars['String']['input']>;
  children?: InputMaybe<Array<InputMaybe<PagesSectionsCompanyDisplaySectionChildrenMutation>>>;
};

export type PagesSectionsProductSectionProductSectionChildMutation = {
  sectionTitle?: InputMaybe<Scalars['String']['input']>;
  sectionDescription?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type PagesSectionsProductSectionMutation = {
  sectionTitle?: InputMaybe<Scalars['String']['input']>;
  sectionContent?: InputMaybe<Scalars['String']['input']>;
  productSectionChild?: InputMaybe<Array<InputMaybe<PagesSectionsProductSectionProductSectionChildMutation>>>;
};

export type PagesSectionsServiceSectionMutation = {
  author?: InputMaybe<Scalars['String']['input']>;
  quote?: InputMaybe<Scalars['String']['input']>;
};

export type PagesSectionsMutation = {
  singleTitleHeroSection?: InputMaybe<PagesSectionsSingleTitleHeroSectionMutation>;
  multipleTitleHeroSection?: InputMaybe<PagesSectionsMultipleTitleHeroSectionMutation>;
  companyDisplaySection?: InputMaybe<PagesSectionsCompanyDisplaySectionMutation>;
  productSection?: InputMaybe<PagesSectionsProductSectionMutation>;
  serviceSection?: InputMaybe<PagesSectionsServiceSectionMutation>;
};

export type PagesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  sections?: InputMaybe<Array<InputMaybe<PagesSectionsMutation>>>;
};

export type GlobalHeaderNavChildrenMutation = {
  href?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalHeaderNavMutation = {
  href?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  children?: InputMaybe<Array<InputMaybe<GlobalHeaderNavChildrenMutation>>>;
};

export type GlobalHeaderMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  nav?: InputMaybe<Array<InputMaybe<GlobalHeaderNavMutation>>>;
};

export type GlobalFooterSocialMutation = {
  facebook?: InputMaybe<Scalars['String']['input']>;
  linkedIn?: InputMaybe<Scalars['String']['input']>;
  twitter?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalFooterMutation = {
  social?: InputMaybe<GlobalFooterSocialMutation>;
};

export type GlobalMutation = {
  header?: InputMaybe<GlobalHeaderMutation>;
  footer?: InputMaybe<GlobalFooterMutation>;
};

export type PortfolioMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  category_color?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  bgColor?: InputMaybe<Scalars['String']['input']>;
  textColor?: InputMaybe<Scalars['String']['input']>;
  buttonColor?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  bgImage?: InputMaybe<Scalars['String']['input']>;
  linkImage?: InputMaybe<Scalars['String']['input']>;
};

export type UserPartsFragment = { __typename: 'User', users?: Array<{ __typename: 'UserUsers', username: string, name?: string | null, email?: string | null, password: { __typename?: 'UserUsersPassword', value: string, passwordChangeRequired?: boolean | null } } | null> | null };

export type PagesPartsFragment = { __typename: 'Pages', title: string, description?: string | null, sections?: Array<{ __typename: 'PagesSectionsSingleTitleHeroSection', singleTitle: string, sectionDescription?: string | null, heroImage?: string | null, link?: string | null } | { __typename: 'PagesSectionsMultipleTitleHeroSection', sectionDescription?: string | null, heroImage?: string | null, link?: string | null, multipleTitles?: Array<{ __typename: 'PagesSectionsMultipleTitleHeroSectionMultipleTitles', title: string } | null> | null } | { __typename: 'PagesSectionsCompanyDisplaySection', sectionTitle: string, children?: Array<{ __typename: 'PagesSectionsCompanyDisplaySectionChildren', href: string, heroImage?: string | null } | null> | null } | { __typename: 'PagesSectionsProductSection', sectionTitle: string, sectionContent?: string | null, productSectionChild?: Array<{ __typename: 'PagesSectionsProductSectionProductSectionChild', sectionTitle: string, sectionDescription?: string | null, heroImage?: string | null, link?: string | null } | null> | null } | { __typename: 'PagesSectionsServiceSection', author?: string | null, quote?: string | null } | null> | null };

export type GlobalPartsFragment = { __typename: 'Global', header?: { __typename: 'GlobalHeader', title?: string | null, logo?: string | null, nav?: Array<{ __typename: 'GlobalHeaderNav', href?: string | null, label?: string | null, isActive?: boolean | null, children?: Array<{ __typename: 'GlobalHeaderNavChildren', href?: string | null, label?: string | null } | null> | null } | null> | null } | null, footer?: { __typename: 'GlobalFooter', social?: { __typename: 'GlobalFooterSocial', facebook?: string | null, linkedIn?: string | null, twitter?: string | null } | null } | null };

export type PortfolioPartsFragment = { __typename: 'Portfolio', title: string, category: string, category_color?: string | null, description: string, bgColor: string, textColor: string, buttonColor: string, image: string, bgImage: string, linkImage: string };

export type UserQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type UserQuery = { __typename?: 'Query', user: { __typename: 'User', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, users?: Array<{ __typename: 'UserUsers', username: string, name?: string | null, email?: string | null, password: { __typename?: 'UserUsersPassword', value: string, passwordChangeRequired?: boolean | null } } | null> | null } };

export type UserConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<UserFilter>;
}>;


export type UserConnectionQuery = { __typename?: 'Query', userConnection: { __typename?: 'UserConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'UserConnectionEdges', cursor: string, node?: { __typename: 'User', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, users?: Array<{ __typename: 'UserUsers', username: string, name?: string | null, email?: string | null, password: { __typename?: 'UserUsersPassword', value: string, passwordChangeRequired?: boolean | null } } | null> | null } | null } | null> | null } };

export type PagesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PagesQuery = { __typename?: 'Query', pages: { __typename: 'Pages', id: string, title: string, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, sections?: Array<{ __typename: 'PagesSectionsSingleTitleHeroSection', singleTitle: string, sectionDescription?: string | null, heroImage?: string | null, link?: string | null } | { __typename: 'PagesSectionsMultipleTitleHeroSection', sectionDescription?: string | null, heroImage?: string | null, link?: string | null, multipleTitles?: Array<{ __typename: 'PagesSectionsMultipleTitleHeroSectionMultipleTitles', title: string } | null> | null } | { __typename: 'PagesSectionsCompanyDisplaySection', sectionTitle: string, children?: Array<{ __typename: 'PagesSectionsCompanyDisplaySectionChildren', href: string, heroImage?: string | null } | null> | null } | { __typename: 'PagesSectionsProductSection', sectionTitle: string, sectionContent?: string | null, productSectionChild?: Array<{ __typename: 'PagesSectionsProductSectionProductSectionChild', sectionTitle: string, sectionDescription?: string | null, heroImage?: string | null, link?: string | null } | null> | null } | { __typename: 'PagesSectionsServiceSection', author?: string | null, quote?: string | null } | null> | null } };

export type PagesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PagesFilter>;
}>;


export type PagesConnectionQuery = { __typename?: 'Query', pagesConnection: { __typename?: 'PagesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PagesConnectionEdges', cursor: string, node?: { __typename: 'Pages', id: string, title: string, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, sections?: Array<{ __typename: 'PagesSectionsSingleTitleHeroSection', singleTitle: string, sectionDescription?: string | null, heroImage?: string | null, link?: string | null } | { __typename: 'PagesSectionsMultipleTitleHeroSection', sectionDescription?: string | null, heroImage?: string | null, link?: string | null, multipleTitles?: Array<{ __typename: 'PagesSectionsMultipleTitleHeroSectionMultipleTitles', title: string } | null> | null } | { __typename: 'PagesSectionsCompanyDisplaySection', sectionTitle: string, children?: Array<{ __typename: 'PagesSectionsCompanyDisplaySectionChildren', href: string, heroImage?: string | null } | null> | null } | { __typename: 'PagesSectionsProductSection', sectionTitle: string, sectionContent?: string | null, productSectionChild?: Array<{ __typename: 'PagesSectionsProductSectionProductSectionChild', sectionTitle: string, sectionDescription?: string | null, heroImage?: string | null, link?: string | null } | null> | null } | { __typename: 'PagesSectionsServiceSection', author?: string | null, quote?: string | null } | null> | null } | null } | null> | null } };

export type GlobalQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type GlobalQuery = { __typename?: 'Query', global: { __typename: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'GlobalHeader', title?: string | null, logo?: string | null, nav?: Array<{ __typename: 'GlobalHeaderNav', href?: string | null, label?: string | null, isActive?: boolean | null, children?: Array<{ __typename: 'GlobalHeaderNavChildren', href?: string | null, label?: string | null } | null> | null } | null> | null } | null, footer?: { __typename: 'GlobalFooter', social?: { __typename: 'GlobalFooterSocial', facebook?: string | null, linkedIn?: string | null, twitter?: string | null } | null } | null } };

export type GlobalConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<GlobalFilter>;
}>;


export type GlobalConnectionQuery = { __typename?: 'Query', globalConnection: { __typename?: 'GlobalConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'GlobalConnectionEdges', cursor: string, node?: { __typename: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'GlobalHeader', title?: string | null, logo?: string | null, nav?: Array<{ __typename: 'GlobalHeaderNav', href?: string | null, label?: string | null, isActive?: boolean | null, children?: Array<{ __typename: 'GlobalHeaderNavChildren', href?: string | null, label?: string | null } | null> | null } | null> | null } | null, footer?: { __typename: 'GlobalFooter', social?: { __typename: 'GlobalFooterSocial', facebook?: string | null, linkedIn?: string | null, twitter?: string | null } | null } | null } | null } | null> | null } };

export type PortfolioQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PortfolioQuery = { __typename?: 'Query', portfolio: { __typename: 'Portfolio', id: string, title: string, category: string, category_color?: string | null, description: string, bgColor: string, textColor: string, buttonColor: string, image: string, bgImage: string, linkImage: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PortfolioConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PortfolioFilter>;
}>;


export type PortfolioConnectionQuery = { __typename?: 'Query', portfolioConnection: { __typename?: 'PortfolioConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PortfolioConnectionEdges', cursor: string, node?: { __typename: 'Portfolio', id: string, title: string, category: string, category_color?: string | null, description: string, bgColor: string, textColor: string, buttonColor: string, image: string, bgImage: string, linkImage: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const UserPartsFragmentDoc = gql`
    fragment UserParts on User {
  __typename
  users {
    __typename
    username
    name
    email
    password {
      value
      passwordChangeRequired
    }
  }
}
    `;
export const PagesPartsFragmentDoc = gql`
    fragment PagesParts on Pages {
  __typename
  title
  description
  sections {
    __typename
    ... on PagesSectionsSingleTitleHeroSection {
      singleTitle
      sectionDescription
      heroImage
      link
    }
    ... on PagesSectionsMultipleTitleHeroSection {
      multipleTitles {
        __typename
        title
      }
      sectionDescription
      heroImage
      link
    }
    ... on PagesSectionsCompanyDisplaySection {
      sectionTitle
      children {
        __typename
        href
        heroImage
      }
    }
    ... on PagesSectionsProductSection {
      sectionTitle
      sectionContent
      productSectionChild {
        __typename
        sectionTitle
        sectionDescription
        heroImage
        link
      }
    }
    ... on PagesSectionsServiceSection {
      author
      quote
    }
  }
}
    `;
export const GlobalPartsFragmentDoc = gql`
    fragment GlobalParts on Global {
  __typename
  header {
    __typename
    title
    logo
    nav {
      __typename
      href
      label
      isActive
      children {
        __typename
        href
        label
      }
    }
  }
  footer {
    __typename
    social {
      __typename
      facebook
      linkedIn
      twitter
    }
  }
}
    `;
export const PortfolioPartsFragmentDoc = gql`
    fragment PortfolioParts on Portfolio {
  __typename
  title
  category
  category_color
  description
  bgColor
  textColor
  buttonColor
  image
  bgImage
  linkImage
}
    `;
export const UserDocument = gql`
    query user($relativePath: String!) {
  user(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...UserParts
  }
}
    ${UserPartsFragmentDoc}`;
export const UserConnectionDocument = gql`
    query userConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: UserFilter) {
  userConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...UserParts
      }
    }
  }
}
    ${UserPartsFragmentDoc}`;
export const PagesDocument = gql`
    query pages($relativePath: String!) {
  pages(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PagesParts
  }
}
    ${PagesPartsFragmentDoc}`;
export const PagesConnectionDocument = gql`
    query pagesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PagesFilter) {
  pagesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PagesParts
      }
    }
  }
}
    ${PagesPartsFragmentDoc}`;
export const GlobalDocument = gql`
    query global($relativePath: String!) {
  global(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...GlobalParts
  }
}
    ${GlobalPartsFragmentDoc}`;
export const GlobalConnectionDocument = gql`
    query globalConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: GlobalFilter) {
  globalConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...GlobalParts
      }
    }
  }
}
    ${GlobalPartsFragmentDoc}`;
export const PortfolioDocument = gql`
    query portfolio($relativePath: String!) {
  portfolio(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PortfolioParts
  }
}
    ${PortfolioPartsFragmentDoc}`;
export const PortfolioConnectionDocument = gql`
    query portfolioConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PortfolioFilter) {
  portfolioConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PortfolioParts
      }
    }
  }
}
    ${PortfolioPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      user(variables: UserQueryVariables, options?: C): Promise<{data: UserQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: UserQueryVariables, query: string}> {
        return requester<{data: UserQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: UserQueryVariables, query: string}, UserQueryVariables>(UserDocument, variables, options);
      },
    userConnection(variables?: UserConnectionQueryVariables, options?: C): Promise<{data: UserConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: UserConnectionQueryVariables, query: string}> {
        return requester<{data: UserConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: UserConnectionQueryVariables, query: string}, UserConnectionQueryVariables>(UserConnectionDocument, variables, options);
      },
    pages(variables: PagesQueryVariables, options?: C): Promise<{data: PagesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesQueryVariables, query: string}> {
        return requester<{data: PagesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesQueryVariables, query: string}, PagesQueryVariables>(PagesDocument, variables, options);
      },
    pagesConnection(variables?: PagesConnectionQueryVariables, options?: C): Promise<{data: PagesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesConnectionQueryVariables, query: string}> {
        return requester<{data: PagesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesConnectionQueryVariables, query: string}, PagesConnectionQueryVariables>(PagesConnectionDocument, variables, options);
      },
    global(variables: GlobalQueryVariables, options?: C): Promise<{data: GlobalQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalQueryVariables, query: string}> {
        return requester<{data: GlobalQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalQueryVariables, query: string}, GlobalQueryVariables>(GlobalDocument, variables, options);
      },
    globalConnection(variables?: GlobalConnectionQueryVariables, options?: C): Promise<{data: GlobalConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalConnectionQueryVariables, query: string}> {
        return requester<{data: GlobalConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalConnectionQueryVariables, query: string}, GlobalConnectionQueryVariables>(GlobalConnectionDocument, variables, options);
      },
    portfolio(variables: PortfolioQueryVariables, options?: C): Promise<{data: PortfolioQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PortfolioQueryVariables, query: string}> {
        return requester<{data: PortfolioQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PortfolioQueryVariables, query: string}, PortfolioQueryVariables>(PortfolioDocument, variables, options);
      },
    portfolioConnection(variables?: PortfolioConnectionQueryVariables, options?: C): Promise<{data: PortfolioConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PortfolioConnectionQueryVariables, query: string}> {
        return requester<{data: PortfolioConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PortfolioConnectionQueryVariables, query: string}, PortfolioConnectionQueryVariables>(PortfolioConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "/api/tina/gql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  